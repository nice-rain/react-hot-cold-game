{"version":3,"sources":["components/gameTop.js","components/gameInput.js","components/gameGuesses.js","components/hotColdGame.js","serviceWorker.js","index.js"],"names":["GameTop","props","react_default","a","createElement","className","label","defaultProps","GameInput","_this","this","gameWon","onSubmit","e","preventDefault","submitGuess","value","type","placeholder","min","max","required","onChange","setNumber","target","guessCount","Component","GameGuesses","labels","guesses","map","index","key","initialState","guessLabel","inputNumber","HotColdGame","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","answer","Math","floor","random","setState","console","log","newGuess","guess","Number","toConsumableArray","concat","newNumber","number","correct","updateWin","difference","abs","guessedNumber","resetInput","includes","alert","updateGuessLabel","updateCounter","updateGuesses","_this2","onClick","resetGame","gameInput_GameInput","num","updateInput","checkAnswer","title","Boolean","window","location","hostname","match","ReactDOM","render","hotColdGame_HotColdGame","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.440de0c6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './gameTop.css';\r\n\r\nexport default function GameTop (props)\r\n{\r\n    return (\r\n        <div className=\"game-top\">\r\n           <h2>{props.label}</h2>                                    \r\n        </div>\r\n      );\r\n}\r\n\r\nGameTop.defaultProps = {\r\n    label: 'Make Your Guess!'\r\n};","import React, { Component } from 'react';\r\nimport './gameInput.css';\r\n\r\nexport default class GameInput extends Component\r\n{\r\n    render(){\r\n        return (\r\n        <div className=\"game-input\">\r\n            \r\n            {!(this.props.gameWon) &&\r\n            <form onSubmit={(e)=> {\r\n                    e.preventDefault(); \r\n                    this.props.submitGuess(this.props.value);\r\n                }}>\r\n                \r\n                <input \r\n                    type=\"number\" \r\n                    placeholder=\"Enter Your Guess\"\r\n                    value={this.props.value}\r\n                    min=\"1\" \r\n                    max=\"100\"\r\n                    required \r\n                    onChange={e => this.props.setNumber(e.target.value)}\r\n                    ></input>\r\n                <button type=\"submit\">Guess</button>\r\n            </form>}\r\n\r\n\r\n            <p>Guess #<span className=\"guess-count\">{this.props.guessCount}</span>!</p>\r\n            {(this.props.gameWon) && <p className=\"new-game-prompt\">Click New Game to try again!</p>}             \r\n        </div>\r\n      );\r\n    }\r\n}","import React from 'react';\r\nimport './gameGuesses.css';\r\n\r\nexport default function GameGuesses (props)\r\n{\r\n    //Map all our of labels into list items (to be passed to gameGuesses)\r\n    const labels = props.guesses.map((label, index) =>\r\n    <li key={index}>\r\n        {label}\r\n    </li>\r\n    );\r\n\r\n    return (\r\n        <div className=\"game-guesses\">\r\n            <ul>{labels}</ul>                  \r\n        </div>\r\n      );\r\n}","import React, { Component } from 'react';\r\nimport './hotColdGame.css';\r\nimport GameTop from './gameTop.js';\r\nimport GameInput from './gameInput.js';\r\nimport GameGuesses from './gameGuesses.js';\r\n\r\nconst initialState = {\r\n    guessCount: 0,\r\n    guessLabel: 'Make Your Guess!',\r\n    guesses: [],\r\n    inputNumber:'',\r\n    gameWon: false\r\n};\r\n\r\nexport default class HotColdGame extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = initialState;\r\n        this.answer = Math.floor(Math.random() * (+100 - +0)) + +0;\r\n    }\r\n\r\n    resetInput()\r\n    {\r\n        this.setState({inputNumber:''});\r\n    }\r\n\r\n    resetGame(e)\r\n    {\r\n        this.answer = Math.floor(Math.random() * (+100 - +0)) + +0;\r\n        console.log(this.answer);\r\n        e.preventDefault();\r\n        this.setState(initialState);\r\n    }\r\n\r\n    updateCounter()\r\n    {\r\n        this.setState({\r\n            guessCount: this.state.guessCount + 1\r\n        });\r\n    }\r\n\r\n    //This updates our array of guesses and re-renders the DOM\r\n    updateGuesses(newGuess)\r\n    {\r\n        const guess = Number(newGuess);\r\n\r\n        //Update our state with new guess added into the array\r\n        this.setState({\r\n            guesses: [...this.state.guesses, guess]\r\n        });\r\n    }\r\n\r\n    updateInput(newNumber)\r\n    {\r\n        this.setState({inputNumber: newNumber});\r\n    }\r\n\r\n    updateWin()\r\n    {\r\n        this.setState({gameWon:true});\r\n    }\r\n\r\n    //This updates the label above the input to let the player know if they were successful\r\n    //or incorrect. If correct is true, we let the user know they were successful. If false,\r\n    //we calculate whether or not they are hot or cold.\r\n    updateGuessLabel(number, correct)\r\n    {\r\n        let label;\r\n\r\n        if(correct)\r\n        {\r\n            label = \"You Won!\";\r\n            this.updateWin();\r\n        }\r\n        else{\r\n            //Determine whether or not we are hot or cold\r\n             let difference = Math.abs(number - this.answer);\r\n            if(difference > 10)\r\n             {\r\n                label = `${number} is cold.`;\r\n             }\r\n             else{\r\n                label = `${number} is hot.`;\r\n             }\r\n        }\r\n\r\n        this.setState({\r\n            guessLabel: label\r\n        });\r\n    }\r\n\r\n    //Checks our answer and handles logic if it is correct or incorrect.\r\n    checkAnswer(guessedNumber)\r\n    {\r\n        //reset our input\r\n        this.resetInput();\r\n\r\n        //Check to see if we've already guessed the number\r\n        if(this.state.guesses.includes(Number(guessedNumber)))\r\n        {\r\n            alert(`You've already guessed ${guessedNumber}`);\r\n        }\r\n        else\r\n        {\r\n            if(Number(guessedNumber) ===this.answer)\r\n            {\r\n             this.updateGuessLabel(guessedNumber, true);\r\n             this.updateCounter();\r\n             //update this last because we are checking array previously\r\n             this.updateGuesses(guessedNumber);\r\n            }\r\n            else{\r\n                this.updateGuessLabel(guessedNumber, false);\r\n                this.updateCounter();\r\n                //Update this last because we check the array earlier.\r\n                this.updateGuesses(guessedNumber);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"hot-cold-game\">\r\n            <nav>\r\n                <ul>\r\n                    {/* <li>Help?</li> */}\r\n                    <li className=\"new-game-link\"><button type=\"button\" className=\"link-button\" onClick={(e)=> this.resetGame(e)}>New Game</button></li>\r\n                </ul>\r\n            </nav>\r\n                <h1>HOT or COLD</h1>\r\n            \r\n                <section className=\"game-container\">\r\n                <GameTop label={this.state.guessLabel}/>\r\n                <GameInput\r\n                    value={this.state.inputNumber}\r\n                    gameWon={this.state.gameWon} \r\n                    guessCount={this.state.guessCount}\r\n                    setNumber={num => this.updateInput(num)} \r\n                    submitGuess={(guess)=> this.checkAnswer(guess)}/>\r\n                <GameGuesses guesses={this.state.guesses}/>\r\n                \r\n            </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nHotColdGame.defaultProps = {\r\n    title: 'Hot or Cold'\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport HotColdGame from './components/hotColdGame';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HotColdGame />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}